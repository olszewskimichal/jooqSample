/*
 * This file is generated by jOOQ.
 */
package pl.michal.olszewski.jooqsample.db.tables;


import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import pl.michal.olszewski.jooqsample.db.Keys;
import pl.michal.olszewski.jooqsample.db.Public;
import pl.michal.olszewski.jooqsample.db.tables.records.ReservationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Reservation extends TableImpl<ReservationRecord> {

  /**
   * The reference instance of <code>PUBLIC.RESERVATION</code>
   */
  public static final Reservation RESERVATION = new Reservation();
  private static final long serialVersionUID = -1309329921;
  /**
   * The column <code>PUBLIC.RESERVATION.ID</code>.
   */
  public final TableField<ReservationRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");
  /**
   * The column <code>PUBLIC.RESERVATION.DESCRIPTION</code>.
   */
  public final TableField<ReservationRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");
  /**
   * The column <code>PUBLIC.RESERVATION.NAME</code>.
   */
  public final TableField<ReservationRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

  /**
   * Create a <code>PUBLIC.RESERVATION</code> table reference
   */
  public Reservation() {
    this("RESERVATION", null);
  }

  /**
   * Create an aliased <code>PUBLIC.RESERVATION</code> table reference
   */
  public Reservation(String alias) {
    this(alias, RESERVATION);
  }

  private Reservation(String alias, Table<ReservationRecord> aliased) {
    this(alias, aliased, null);
  }

  private Reservation(String alias, Table<ReservationRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, "");
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ReservationRecord> getRecordType() {
    return ReservationRecord.class;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Identity<ReservationRecord, Long> getIdentity() {
    return Keys.IDENTITY_RESERVATION;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public UniqueKey<ReservationRecord> getPrimaryKey() {
    return Keys.CONSTRAINT_2;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<UniqueKey<ReservationRecord>> getKeys() {
    return Arrays.<UniqueKey<ReservationRecord>>asList(Keys.CONSTRAINT_2);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public Reservation as(String alias) {
    return new Reservation(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Reservation rename(String name) {
    return new Reservation(name, null);
  }
}
